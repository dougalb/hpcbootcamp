#!/bin/bash
# Copyright 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at

#  http://aws.amazon.com/apache2.0

# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

set -x

usage() {
    echo "usage: `basename $0` options:<m|r>"
}

mymaster=""
options=':m:r:'
while getopts $options option
do
    case $option in
        m  ) mymaster=$OPTARG;;
        r  ) resources_arg="$OPTARG";;
        \? ) echo "Unknown option: -$OPTARG" >&2; usage; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; usage; exit 1;;
        *  ) echo "Unimplimented option: -$OPTARG" >&2; usage; exit 1;;
    esac
done

function error_exit () {
  script=`basename $0`
  echo "lavacloud: $script - $1"
  logger -t lavacloud "$script - $1"
  exit 1
}

if [ "x$mymaster" == "x" ]; then
  error_exit 'No master server specified.'
  usage
fi

resources_arg=$(echo $resources_arg| tr ',' ' ')
resources="cs $resources_arg"

myhostname=$(hostname -s)
if [ $? != 0 ]; then
  error_exit 'Failed to determine short hostname.'
fi

# Determine instance type
instance_type=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone`
instance_type=$(echo $instance_type| tr '.' '_')

# Setup resources
resources_arg=$(echo $resources_arg| tr ',' ' ')
resources="cs $instance_type $resources_arg"

# Mount NFS exports
RC=0
echo "$mymaster:/home /home nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
echo "$mymaster:/shared /shared nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
mount -v /home || RC=1
mount -v /shared || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during during NFS mounts"
fi

# Configure ganglia
RC=0
location=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone` || RC=1
cd /etc/ganglia || RC=1
/bin/cp -f gmond.conf.COMPUTE gmond.conf || RC=1
sed -i "s/<master>/$mymaster/" gmond.conf || RC=1
sed -i "s/<location>/$location/" gmond.conf || RC=1
chkconfig gmond on || RC=1
service gmond start || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during Ganglia setup"
fi

# Configure openlava
RC=0
cd /opt/openlava-2.1/etc || RC=1
/bin/cp -f lsf.conf.COMPUTE lsf.conf || RC=1
/bin/cp -f lsf.cluster.openlava.COMPUTE lsf.cluster.openlava || RC=1
sed -i "s/<master>/$mymaster/" lsf.conf || RC=1
sed -i "s/<master>/$mymaster/" lsf.cluster.openlava || RC=1
sed -i "s/<compute>/$myhostname/" lsf.cluster.openlava || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during Openlava configuration"
fi

# Start openlava
RC=0
chkconfig openlava on || RC=1
service openlava start || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to start openlava"
fi

# Add host to cluster
. /opt/openlava-2.1/etc/openlava.sh
lsaddhost -m IntelXeon -t linux -R "$resources" $myhostname
RC=$?
if [ $RC -ne 0 ]; then
  sleep 45
  lsaddhost -m IntelXeon -t linux -R "$resources" $myhostname
  RC=$?
  if [ $RC -ne 0 ]; then
    sleep 60
    lsaddhost -m IntelXeon -t linux -R "$resources" $myhostname
    RC=$?
    if [ $RC -ne 0 ]; then
      error_exit "Failed to add host to cluster"
    fi
  fi
fi 

script=`basename $0`
echo "lavacloud: $script - SUCCESS - Booted as lavaCloud Compute connected to Master - $mymaster"
logger -t lavacloud "$script - SUCCESS - Booted as lavaCloud Compute connected to Master - $mymaster"
